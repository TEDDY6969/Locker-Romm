<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="twitter:site" content="website" />
        <meta name="twitter:title" content="IndianGPT" />
        <meta name="twitter:description" content="A simple text based Chatbot." />
        <meta name="twitter:image" content="https://cdn.discordapp.com/attachments/1050293876847542312/1054294111567499284/Screenshot_2022-12-19-12-29-31-24-removebg-preview.png" />

        <meta property='og:title' content='IndianGPT' />
        <meta property='og:type' content="website" />
        <meta property='og:description' content='A simple text based Chatbot.' />
        <meta property="og:image" content='https://cdn.discordapp.com/attachments/1050293876847542312/1054294111567499284/Screenshot_2022-12-19-12-29-31-24-removebg-preview.png' />
        <meta name="theme-color" content="#82c9f5" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="https://cdn.discordapp.com/attachments/1050293876847542312/1054294111567499284/Screenshot_2022-12-19-12-29-31-24-removebg-preview.png" type="image/x-icon">
    <title>Locker Room</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  </head>
  <body>
    <style>
*{
  padding: 0;
  margin: 0;
}
.chat-container {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  filter: blur(5px);
}

.chat-header {
  background-color: #82c9f5;
  padding: 5px;
  margin: 0, auto;
  color: white;
  font-size: 10px;
  text-align: center;
}

.chat-header img{
  background-color: #82c9f5;
  color: white;
  margin: 0, auto;
  position: relative;
  height: 40;
  width: 90%;
  font-size: 10px;
  justify-content: center;

}

.chat-messages {
  background-image: url(https://cdn.discordapp.com/attachments/1050293876847542312/1054264522099146802/images_6.jpeg);
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  position: relative;
  flex: 1;
  overflow-y: scroll;
  padding: 20px;
}

.chat-messages ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

.chat-messages li {
  margin-bottom: 20px;
  font-size: 16px;
  border-radius: 11px;
  border: none;
}

.chat-form {
  background-color: #e6f2ff;
  padding: 20px;
  display: flex;
}

.chat-form form {
  width: 100%;
  display: flex;
}

.chat-form input[type="text"] {
  flex: 1;
  padding: 10px;
  border: none;
  font-size: 16px;
  border-radius: 15px;
}

.chat-form button[type="submit"] {
  padding: 10px;
  margin: 1px;
  border: none;
  font-size: 16px;
  border-radius: 50%;
  background-color: mediumpurple;
  color: white;
}

@media (max-width: 600px) {
  .chat-container {
    flex-direction: column;
  }
  .chat-form {
    flex-direction: column;
  }
  .chat-form input[type="text"] {
    width: 100%;
  }
}
      /* Small screens (phones) */
@media screen and (max-width: 500px) {
  .chat-container {
    flex-direction: column;
  }

  .chat-header {
    flex: none;
  }

  .chat-messages {
    flex: 1;
  }

  .chat-form {
    flex: none;
  }
}

/* Large screens (laptops and desktops) */
@media screen and (min-width: 1000px) {
  .chat-container {
    flex-direction: row;
  }

  .chat-header {
    flex: none;
    width: 25%;
  }

  .chat-messages {
    flex: 1;
    width: 50%;
  }

  .chat-form {
    flex: none;
    width: 25%;
  }
}

/* Tablets (portrait) */
@media screen and (max-width: 768px) and (orientation: portrait) {
  .chat-container {
    flex-direction: column;
  }

  .chat-header {
    flex: none;
  }

  .chat-messages {
    flex: 1;
  }

  .chat-form {
    flex: none;
  }
}
      #login-form {
  width: 300px;
  padding: 20px;
  border: 3px solid #cccbf7;
  box-shadow: 10px 10px 15px #dbeaff;
  border-radius: 5px;
  margin: auto;
  margin-top: 50px;
  text-align: center;
}

/* Style the input fields and submit button */
#login-form input, #login-form button {
  width: 80%;
  padding: 12px;
  border: 2px solid #cccbf7;
  border-radius: 4px;
  margin: 8px 0;
  box-sizing: border-box;
}

/* Style the submit button */
#login-form button {
  background-color: #f7d7e5;
  font-size: 12px
  color: white;
  cursor: pointer;
}

/* Blur the chat interface when the login form is displayed */
#login-form:before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #82c9f5;
  z-index: -5;
}


      </style>
   <form id="login-form">
  <label for="username">Enter You Name:</label><br>
  <input type="text" id="username" name="username" required><br>
  <button type="submit" id="submit-button">Submit</button>
    </form>
    
      <div class="chat-container">
  <div class="chat-header">
    
    <h1>Locker Room</h1>
  </div>
         
  <div class="chat-messages">
    <ul id="messages"></ul>
  </div>
  <div class="chat-form">
    <form id="message-form">
      <input id="message-input" type="text" placeholder="Enter your message..." />
      <button type="submit"><i class="fa fa-send-o"></i></button>
      
    </form>
  </div>
</div>
     <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      const form = document.getElementById('message-form');
      const input = document.getElementById('message-input');
      const messages = document.getElementById('messages');
      const loginForm = document.getElementById("login-form");
const submitButton = document.getElementById("submit-button");
      
// Add an event listener to the submit button
submitButton.addEventListener("click", event => {
  // Prevent the default form submission behavior
  event.preventDefault();
console.log('button is clicked')
  // Get the username entered by the user
 
const chatContainer = document.querySelector('.chat-container');
  
  const username = document.getElementById("username").value;
socket.emit('set username', username);

  chatContainer.style.filter = "none";
  loginForm.style.display = "none";
    });
      const clientName = document.getElementById("username").value;
    
     /* socket.on('new user', (message) => {
     const li = document.createElement('li');
        li.textContent = `${document.getElementById("username").value} ${message}`;
        messages.appendChild(li);
  });*/

      form.addEventListener('submit', e => {
        e.preventDefault();
        socket.emit('send message', (document.getElementById("username").value + ':  ' + input.value));
        input.value = '';
      });//(name + ':  ' + $('#m').val())

      socket.on('message', message => {
       
        const li = document.createElement('li');
        li.textContent = message;
        messages.appendChild(li);
      });
socket.on('new user', message => {
  // Create a new list item
  const li = document.createElement('li');
  // Set the list item's inner HTML to the message
  li.innerHTML = message;
  // Append the list item to the messages list
  messages.appendChild(li);
});

    </script>

  </body>
</html>